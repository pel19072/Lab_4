$date
	Fri Nov 06 20:01:57 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 4 ! out [3:0] $end
$var wire 2 " flags [1:0] $end
$var reg 1 # clock $end
$var reg 1 $ enablea $end
$var reg 1 % enablebuff1 $end
$var reg 1 & enablebuff2 $end
$var reg 4 ' in [3:0] $end
$var reg 1 ( reset $end
$var reg 3 ) selector [2:0] $end
$scope module P1 $end
$var wire 1 # clk $end
$var wire 1 * enable $end
$var wire 1 $ enablea $end
$var wire 1 % enablebuff1 $end
$var wire 1 & enablebuff2 $end
$var wire 4 + in1 [3:0] $end
$var wire 1 ( reset $end
$var wire 3 , selector [2:0] $end
$var wire 4 - result [3:0] $end
$var wire 4 . out2 [3:0] $end
$var wire 2 / flags [1:0] $end
$var wire 4 0 data_bus [3:0] $end
$var wire 4 1 accu [3:0] $end
$scope module A1 $end
$var wire 3 2 selector [2:0] $end
$var wire 1 3 zero $end
$var wire 4 4 result [3:0] $end
$var wire 2 5 flags [1:0] $end
$var wire 4 6 data_bus [3:0] $end
$var wire 1 7 carry $end
$var wire 4 8 accu [3:0] $end
$var reg 5 9 result_flags [4:0] $end
$upscope $end
$scope module Buff1 $end
$var wire 1 % enable $end
$var wire 4 : in [3:0] $end
$var wire 4 ; out [3:0] $end
$upscope $end
$scope module Buff2 $end
$var wire 1 & enable $end
$var wire 4 < in [3:0] $end
$var wire 4 = out [3:0] $end
$upscope $end
$scope module W1 $end
$var wire 1 # clk $end
$var wire 1 * enable $end
$var wire 1 ( reset $end
$var wire 4 > result [3:0] $end
$var reg 4 ? accu [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
x7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
z*
bx )
x(
bx '
x&
x%
x$
x#
bx "
bx !
$end
#2
b0 -
b0 4
b0 <
b0 >
03
b0 "
b0 /
b0 5
07
b0 9
b0 1
b0 8
b0 ?
bz !
bz .
bz =
bz 0
bz 6
bz ;
b0 '
b0 +
b0 :
b0 )
b0 ,
b0 2
1#
1(
0&
0%
0$
#3
0#
#4
1#
0(
#5
0#
#6
1#
b0 !
b0 .
b0 =
b1010 0
b1010 6
b1010 ;
b1010 '
b1010 +
b1010 :
1&
1%
1$
#7
0#
#8
b1100 !
b1100 .
b1100 =
b1100 -
b1100 4
b1100 <
b1100 >
17
b11 "
b11 /
b11 5
13
b11100 9
1#
b100 0
b100 6
b100 ;
b100 '
b100 +
b100 :
b1 )
b1 ,
b1 2
#9
0#
#10
b1 !
b1 .
b1 =
b1 -
b1 4
b1 <
b1 >
b1 "
b1 /
b1 5
07
b1 9
1#
b1 0
b1 6
b1 ;
b1 '
b1 +
b1 :
b10 )
b10 ,
b10 2
#11
0#
#12
b110 !
b110 .
b110 =
b110 -
b110 4
b110 <
b110 >
b110 9
1#
b110 0
b110 6
b110 ;
b110 '
b110 +
b110 :
b11 )
b11 ,
b11 2
#13
0#
#14
b1111 !
b1111 .
b1111 =
b1111 -
b1111 4
b1111 <
b1111 >
b11 "
b11 /
b11 5
17
b11111 9
1#
b111 0
b111 6
b111 ;
b111 '
b111 +
b111 :
b100 )
b100 ,
b100 2
#15
0#
#16
1#
